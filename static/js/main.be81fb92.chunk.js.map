{"version":3,"sources":["networks.ts","components/DaoTableRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["networks","Map","rpcUrl","explorerUrl","apiUrl","apiKey","aragonIdAddress","fromBlock","getLogUrl","networkType","network","get","getExplorerUrlByTransaction","txHash","abi","appendAragonId","name","DaoTableRow","rowIndex","timestamp","networkName","hash","useState","daoName","setDaoName","useEffect","cancel","a","provider","providers","JsonRpcProvider","iface","utils","Interface","sigNewTokenAndInstance","getSighash","sigNewInstance","getTransaction","tx","data","startsWith","functionName","decoded","decodeFunctionData","id","getDaoName","toDateString","href","networkNames","Array","from","keys","App","result","setResult","selectedNetwork","setNetworkIndex","fetch","method","headers","response","json","jsonResult","map","res","row","transactionHash","Date","parseInt","timeStamp","blockNumber","sort","rowA","rowB","getData","handleNetworkChange","useCallback","index","className","scrollView","primary","secondary","items","selected","onChange","length","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be81fb92.chunk.js","sourcesContent":["export const networks = new Map([\n  [\n    \"ArbitrumTestnet\",\n    {\n      rpcUrl: \"https://rinkeby.arbitrum.io/rpc\",\n      explorerUrl: \"https://testnet.arbiscan.io\",\n      apiUrl: \"https://api-testnet.arbiscan.io/api\",\n      apiKey: \"4GJTTHSHGA5T1HYR5FPWYF8Q3QEERGK2ZM\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0x9060373BD2Eaf09965E1c6791348941F89C8Bd5a\",\n      fromBlock: 5601238,\n    },\n  ],\n  [\n    \"Polygon\",\n    {\n      rpcUrl:\n        \"https://polygon-mainnet.g.alchemy.com/v2/SY5Q3m-zAgxioTcOuGcAmJGns4JHYtmV\",\n      explorerUrl: \"https://polygonscan.com\",\n      apiUrl: \"https://api.polygonscan.com/api\",\n      apiKey: \"2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0xB1b9fB937A11873380b3B87a1eF8063a66e54822\",\n      fromBlock: 18617853,\n    },\n  ],\n  [\n    \"Mumbai\",\n    {\n      rpcUrl:\n        \"https://polygon-mumbai.g.alchemy.com/v2/hk9vh9U3GZGWC8Un2i0-ICRoOJkCUQg_\",\n      explorerUrl: \"https://mumbai.polygonscan.com\",\n      apiUrl: \"https://api-testnet.polygonscan.com/api\",\n      apiKey: \"2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0xB0CeC6F20Ea617D0CdeFef6521AaD99d21876Ad5\",\n      fromBlock: 17883970,\n    },\n  ],\n  [\n    \"Ethereum\",\n    {\n      rpcUrl: \"https://mainnet.infura.io/v3/7c338dd2f00a443c906e6f081cf11b07\",\n      explorerUrl: \"https://etherscan.io\",\n      apiUrl: \"https://api.etherscan.io/api\",\n      apiKey: \"HCDV8YBBWDK369IPAA8QMBE2DIEP94CEB7\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0x546aA2EaE2514494EeaDb7bbb35243348983C59d\",\n      fromBlock: 10000000,\n    },\n  ],\n]);\n\n// topic = ClaimSubdomain\nconst topic =\n  \"0xe27a5a369e0d2c5056ccfcbd5f83f145f43350142d42aaf46ff9a9e461d543df\";\nexport function getLogUrl(networkType: string): string {\n  const network = networks.get(networkType);\n\n  return network\n    ? `${network.apiUrl}?` +\n        `module=logs&action=getLogs&fromBlock=${network.fromBlock}` +\n        `&address=${network.aragonIdAddress}` +\n        `&topic0=${topic}` +\n        `&apikey=${network.apiKey}`\n    : \"\";\n}\n\nexport function getExplorerUrlByTransaction(\n  networkType: string,\n  txHash: string = \"\"\n): string {\n  const network = networks.get(networkType);\n\n  return network ? `${network.explorerUrl}/tx/${txHash}` : \"\";\n}\n","import { Link } from \"@aragon/ui\";\nimport { providers, utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport { getExplorerUrlByTransaction, networks } from \"../networks\";\n\nconst abi = [\n  `function newTokenAndInstance(\n  string _tokenName,\n  string _tokenSymbol,\n  string id,\n  address[] _holders,\n  uint256[] _stakes,\n  uint64[3] _votingSettings,\n  uint64 _financePeriod,\n  bool _useAgentAsVault\n)`,\n  `function newInstance(\n  string id,\n  address[] memory _holders,\n  uint256[] memory _stakes,\n  uint64[3] memory _votingSettings,\n  uint64 _financePeriod,\n  bool _useAgentAsVault\n)`,\n];\n\ninterface DaoItemProps {\n  rowIndex: number;\n  timestamp: Date;\n  networkName: string;\n  hash: string;\n}\n\nconst appendAragonId = (name: string) => name + \".aragonid.eth\";\n\nfunction DaoTableRow({ rowIndex, timestamp, networkName, hash }: DaoItemProps) {\n  const [daoName, setDaoName] = useState(\"\");\n\n  useEffect(() => {\n    let cancel = false;\n\n    async function getDaoName() {\n      const network = networks.get(networkName);\n      if (!network) return;\n\n      const provider = new providers.JsonRpcProvider(network.rpcUrl);\n      const iface = new utils.Interface(abi);\n\n      const sigNewTokenAndInstance = iface.getSighash(\"newTokenAndInstance\");\n      const sigNewInstance = iface.getSighash(\"newInstance\");\n\n      const tx = await provider.getTransaction(hash);\n      if (tx.data) {\n        let functionName;\n        if (tx.data.startsWith(sigNewTokenAndInstance)) {\n          functionName = \"newTokenAndInstance\";\n        }\n        if (tx.data.startsWith(sigNewInstance)) {\n          functionName = \"newInstance\";\n        }\n\n        if (functionName) {\n          const decoded = iface.decodeFunctionData(functionName, tx.data);\n\n          if (!cancel) {\n            setDaoName(appendAragonId(decoded.id));\n          }\n        }\n      }\n    }\n\n    getDaoName();\n\n    return () => {\n      cancel = true;\n    };\n  }, [hash, networkName]);\n\n  //if (!daoName) return null;\n\n  return (\n    <tr key={rowIndex}>\n      <td>{timestamp.toDateString()}</td>\n      <td>\n        <Link href={getExplorerUrlByTransaction(networkName, hash)}>\n          {hash}\n        </Link>\n      </td>\n      <td>\n        <span>{daoName}</span>\n      </td>\n    </tr>\n  );\n}\n\nexport default DaoTableRow;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Main, Box, Header, DropDown } from \"@aragon/ui\";\nimport { networks, getLogUrl } from \"./networks\";\nimport DaoTableRow from \"./components/DaoTableRow\";\n\ntype DaoInfo = {\n  hash: string;\n  timestamp: Date;\n  blockNumber: number;\n};\n\nconst networkNames = Array.from(networks.keys());\n\nfunction App() {\n  const [result, setResult] = useState<DaoInfo[]>([]);\n  const [selectedNetwork, setNetworkIndex] = useState<number>(0);\n\n  useEffect(() => {\n    let cancel = false;\n\n    async function getData() {\n      const networkType = networkNames[selectedNetwork];\n      const network = networks.get(networkType);\n      if (!network) return;\n\n      const response = await fetch(getLogUrl(networkType), {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const jsonResult = await response.json();\n\n      if (!cancel) {\n        setResult(\n          jsonResult.result\n            .map((res: any, row: number) => {\n              const hash = res.transactionHash;\n              const timestamp = new Date(parseInt(res.timeStamp) * 1000);\n              return { row, hash, timestamp, blockNumber: res.blockNumber };\n            })\n            .sort((rowA: any, rowB: any) => {\n              return rowB.row - rowA.row;\n            })\n        );\n      }\n    }\n\n    getData();\n\n    return () => {\n      cancel = true;\n    };\n  }, [selectedNetwork]);\n\n  const handleNetworkChange = useCallback((index: number) => {\n    setNetworkIndex(index);\n    setResult([]);\n  }, []);\n\n  return (\n    <div className=\"scroll-view-container\">\n      <div className=\"scroll-view\">\n        <Main scrollView={true}>\n          <Header\n            primary=\"Aragon DAO\"\n            secondary={\n              <DropDown\n                items={networkNames}\n                selected={selectedNetwork}\n                onChange={handleNetworkChange}\n              />\n            }\n          />\n          <div>total: {result.length}</div>\n          <Box>\n            <table>\n              <tbody>\n                <tr>\n                  <td>\n                    <b>Date</b>\n                  </td>\n                  <td>\n                    <b>TX hash</b>\n                  </td>\n                  <td>\n                    <b>ENS name</b>\n                  </td>\n                </tr>\n                {result.map((res, i) => {\n                  return (\n                    <DaoTableRow\n                      rowIndex={i}\n                      hash={res.hash}\n                      timestamp={res.timestamp}\n                      networkName={networkNames[selectedNetwork]}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n          </Box>\n        </Main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}