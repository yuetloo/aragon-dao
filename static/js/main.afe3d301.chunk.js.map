{"version":3,"sources":["networks.ts","utils/web3.ts","utils/decoders.ts","components/DaoTableRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["networks","Map","rpcUrl","explorerUrl","apiUrl","apiKey","subgraphUrl","aragonIdAddress","fromBlock","Web3","networkType","network","this","get","first","skip","ethers","utils","fetchJson","JSON","stringify","query","subgraphQuery","then","res","data","domains","map","domain","blockNumber","hash","id","txInput","name","timestamp","Date","parseInt","createdAt","providers","JsonRpcProvider","getBlockNumber","txHash","decoders","Interface","appendAragonId","DaoTableRow","networkName","useState","daoName","setDaoName","useEffect","cancel","a","methodId","slice","decoder","decoded","decodeFunctionData","fragments","getDaoName","toDateString","href","getExplorerUrlByTransaction","networkNames","Array","from","keys","batchSize","App","result","setResult","selectedNetwork","setNetworkIndex","web3","loop","getDomains","batchResult","length","currentResult","concat","getData","handleNetworkChange","useCallback","index","className","scrollView","primary","secondary","items","selected","onChange","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afe3d301.chunk.js","sourcesContent":["export const networks = new Map([\n  [\n    \"Ethereum\",\n    {\n      rpcUrl: \"https://mainnet.infura.io/v3/7c338dd2f00a443c906e6f081cf11b07\",\n      explorerUrl: \"https://etherscan.io\",\n      apiUrl: \"https://api.etherscan.io/api\",\n      apiKey: \"HCDV8YBBWDK369IPAA8QMBE2DIEP94CEB7\",\n      subgraphUrl:\n        \"https://api.thegraph.com/subgraphs/name/yuetloo/aragon-dao-mainnet\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0x546aA2EaE2514494EeaDb7bbb35243348983C59d\",\n      fromBlock: 6593032,\n    },\n  ],\n  /*\n  [\n    \"ArbitrumTestnet\",\n    {\n      rpcUrl: \"https://rinkeby.arbitrum.io/rpc\",\n      explorerUrl: \"https://testnet.arbiscan.io\",\n      apiUrl: \"https://api-testnet.arbiscan.io/api\",\n      apiKey: \"4GJTTHSHGA5T1HYR5FPWYF8Q3QEERGK2ZM\",\n      subgraphUrl:\n        \"https://api.thegraph.com/subgraphs/name/yuetloo/aragon-dao-arbitrumtest\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0x9060373BD2Eaf09965E1c6791348941F89C8Bd5a\",\n      fromBlock: 5601238,\n    },\n  ],*/\n  [\n    \"Polygon\",\n    {\n      rpcUrl:\n        \"https://polygon-mainnet.g.alchemy.com/v2/SY5Q3m-zAgxioTcOuGcAmJGns4JHYtmV\",\n      explorerUrl: \"https://polygonscan.com\",\n      apiUrl: \"https://api.polygonscan.com/api\",\n      apiKey: \"2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P\",\n      subgraphUrl:\n        \"https://api.thegraph.com/subgraphs/name/yuetloo/aragon-dao-polygon\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0xB1b9fB937A11873380b3B87a1eF8063a66e54822\",\n      fromBlock: 18617853,\n    },\n  ],\n  /*\n  [\n    \"Mumbai\",\n    {\n      rpcUrl:\n        \"https://polygon-mumbai.g.alchemy.com/v2/hk9vh9U3GZGWC8Un2i0-ICRoOJkCUQg_\",\n      explorerUrl: \"https://mumbai.polygonscan.com\",\n      apiUrl: \"https://api-testnet.polygonscan.com/api\",\n      apiKey: \"2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P\",\n      subgraphUrl:\n        \"https://api.thegraph.com/subgraphs/name/yuetloo/aragon-dao-mumbai\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0xB0CeC6F20Ea617D0CdeFef6521AaD99d21876Ad5\",\n      fromBlock: 17883970,\n    },\n  ],*/\n]);\n","import { ethers } from \"ethers\";\nimport { networks } from \"../networks\";\n\nconst subgraphQuery = (first: number, skip: number) => ({\n  query: `\n  {\n    domains(first: ${first}, skip: ${skip}, orderBy: blockNumber, orderDirection: desc)\n    {\n      id\n      name\n      txInput\n      blockNumber\n      createdAt\n    }\n  }\n  `,\n});\n\nexport class Web3 {\n  networkType: string;\n  network: any;\n\n  constructor(networkType: string) {\n    this.networkType = networkType;\n    this.network = networks.get(networkType);\n  }\n\n  static getExplorerUrlByTransaction(\n    networkType: string,\n    txHash: string = \"\"\n  ): string {\n    const network = networks.get(networkType);\n\n    return network ? `${network.explorerUrl}/tx/${txHash}` : \"\";\n  }\n\n  getDomains(first: number, skip: number) {\n    return ethers.utils\n      .fetchJson(\n        this.network.subgraphUrl,\n        JSON.stringify(subgraphQuery(first, skip))\n      )\n      .then((res) => {\n        if (!res.data?.domains) return [];\n\n        return res.data.domains.map((domain: any) => {\n          return {\n            blockNumber: domain.blockNumber,\n            hash: domain.id,\n            data: domain.txInput,\n            name: domain.name,\n            timestamp: new Date(parseInt(domain.createdAt) * 1000),\n          };\n        });\n      });\n  }\n\n  getLatestBlock() {\n    const provider = new ethers.providers.JsonRpcProvider(this.network.rpcUrl);\n    return provider.getBlockNumber();\n  }\n}\n","import { ethers } from \"ethers\";\n\nexport const decoders = new Map([\n  [\n    \"0x350cbe71\",\n    new ethers.utils.Interface([\n      \"function finalizeInstance(string id, uint256[2] _virtualSupplies, uint256[2] _virtualBalances, uint256[2] _slippages, uint256 _rateDAI, uint256 _floorDAI)\",\n    ]),\n  ],\n  [\n    \"0x8a29ac04\",\n    new ethers.utils.Interface([\n      \"function newTokenAndInstance(string _tokenName, string _tokenSymbol, string id, address[] _members, uint64[3] _votingSettings, uint64 _financePeriod, bool _useAgentAsVault)\",\n    ]),\n  ],\n  [\n    \"0x885b48e7\",\n    new ethers.utils.Interface([\n      `function newTokenAndInstance(\n              string _tokenName,\n              string _tokenSymbol,\n              string id,\n              address[] _holders,\n              uint256[] _stakes,\n              uint64[3] _votingSettings,\n              uint64 _financePeriod,\n              bool _useAgentAsVault\n      )`,\n    ]),\n  ],\n  [\n    \"0x0eb8e519\",\n    new ethers.utils.Interface([\n      `function newInstance(\n    string id,\n    address[] memory _holders,\n    uint256[] memory _stakes,\n    uint64[3] memory _votingSettings,\n    uint64 _financePeriod,\n    bool _useAgentAsVault\n  )`,\n    ]),\n  ],\n  [\n    \"0xa0fd20de\",\n    new ethers.utils.Interface([\n      \"function newInstance(string id, address[] signers, uint256 neededSignatures)\",\n    ]),\n  ],\n]);\n","import { Link } from \"@aragon/ui\";\nimport { useEffect, useState } from \"react\";\nimport { Web3 } from \"../utils/web3\";\nimport { decoders } from \"../utils/decoders\";\n\ninterface DaoItemProps {\n  timestamp: Date;\n  networkName: string;\n  hash: string;\n  data: string;\n}\n\nconst appendAragonId = (name: string) => name + \".aragonid.eth\";\n\nfunction DaoTableRow({ timestamp, networkName, hash, data }: DaoItemProps) {\n  const [daoName, setDaoName] = useState(\"\");\n\n  useEffect(() => {\n    let cancel = false;\n\n    async function getDaoName() {\n      const methodId = data.slice(0, 10);\n      const decoder = decoders.get(methodId);\n      if (decoder) {\n        const decoded = decoder.decodeFunctionData(\n          decoder.fragments[0].name,\n          data\n        );\n\n        if (!cancel) {\n          setDaoName(appendAragonId(decoded.id));\n        }\n      }\n    }\n\n    getDaoName();\n\n    return () => {\n      cancel = true;\n    };\n  }, [data]);\n\n  //if (!daoName) return null;\n\n  return (\n    <tr>\n      <td>{timestamp.toDateString()}</td>\n      <td>\n        <Link href={Web3.getExplorerUrlByTransaction(networkName, hash)}>\n          {hash}\n        </Link>\n      </td>\n      <td>\n        <span>{daoName}</span>\n      </td>\n    </tr>\n  );\n}\n\nexport default DaoTableRow;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Main, Box, Header, DropDown } from \"@aragon/ui\";\nimport { networks } from \"./networks\";\nimport DaoTableRow from \"./components/DaoTableRow\";\nimport { Web3 } from \"./utils/web3\";\n\ntype DaoInfo = {\n  hash: string;\n  timestamp: Date;\n  blockNumber: number;\n  data: string;\n};\n\nconst networkNames = Array.from(networks.keys());\nconst batchSize = 1000;\n\nfunction App() {\n  const [result, setResult] = useState<DaoInfo[]>([]);\n  const [selectedNetwork, setNetworkIndex] = useState<number>(0);\n\n  useEffect(() => {\n    let cancel = false;\n\n    async function getData() {\n      const networkType = networkNames[selectedNetwork];\n      const network = networks.get(networkType);\n      if (!network) return;\n\n      const web3 = new Web3(networkType);\n      setResult([]);\n      let skip = 0;\n      let loop = true;\n      do {\n        const batchResult = await web3.getDomains(batchSize, skip);\n        skip += batchSize;\n\n        if (batchResult.length === 0) {\n          break;\n        }\n        if (cancel) {\n          break;\n        }\n\n        setResult((currentResult) => currentResult.concat(batchResult));\n      } while (loop);\n    }\n\n    getData();\n\n    return () => {\n      cancel = true;\n    };\n  }, [selectedNetwork]);\n\n  const handleNetworkChange = useCallback((index: number) => {\n    setNetworkIndex(index);\n    setResult([]);\n  }, []);\n\n  return (\n    <div className=\"scroll-view-container\">\n      <div className=\"scroll-view\">\n        <Main scrollView={true}>\n          <Header\n            primary=\"Aragon DAO\"\n            secondary={\n              <DropDown\n                items={networkNames}\n                selected={selectedNetwork}\n                onChange={handleNetworkChange}\n              />\n            }\n          />\n          <div>total: {result.length}</div>\n          <Box>\n            <table>\n              <tbody>\n                <tr key=\"header\">\n                  <td>\n                    <b>Date</b>\n                  </td>\n                  <td>\n                    <b>TX hash</b>\n                  </td>\n                  <td>\n                    <b>ENS name</b>\n                  </td>\n                </tr>\n                {result.map((res, i) => {\n                  return (\n                    <DaoTableRow\n                      key={i}\n                      hash={res.hash}\n                      timestamp={res.timestamp}\n                      data={res.data}\n                      networkName={networkNames[selectedNetwork]}\n                    />\n                  );\n                })}\n              </tbody>\n            </table>\n          </Box>\n        </Main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}