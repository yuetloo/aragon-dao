{"version":3,"sources":["networks.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["networks","Map","rpcUrl","explorerUrl","apiUrl","apiKey","aragonIdAddress","getLogUrl","networkType","network","get","getExplorerUrlByTransaction","txHash","abi","appendAragonId","name","networkNames","Array","from","keys","App","useState","result","setResult","selectedNetwork","setNetworkIndex","useEffect","a","provider","providers","JsonRpcProvider","iface","utils","Interface","fetch","method","headers","response","sigNewTokenAndInstance","getSighash","sigNewInstance","json","jsonResult","Promise","all","map","res","hash","transactionHash","timestamp","Date","parseInt","timeStamp","getTransaction","tx","data","startsWith","decoded","decodeFunctionData","id","blockNumber","names","filter","Boolean","getData","handleNetworkChange","useCallback","index","className","scrollView","primary","secondary","placeholder","items","selected","onChange","length","i","toDateString","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3024ad17.chunk.js","sourcesContent":["export const networks = new Map([\n  [\n    \"ArbitrumTestnet\",\n    {\n      rpcUrl: \"https://rinkeby.arbitrum.io/rpc\",\n      explorerUrl: \"https://testnet.arbiscan.io\",\n      apiUrl: \"https://api-testnet.arbiscan.io/api\",\n      apiKey: \"4GJTTHSHGA5T1HYR5FPWYF8Q3QEERGK2ZM\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0x9060373BD2Eaf09965E1c6791348941F89C8Bd5a\",\n    },\n  ],\n  [\n    \"Polygon\",\n    {\n      rpcUrl:\n        \"https://polygon-mainnet.g.alchemy.com/v2/SY5Q3m-zAgxioTcOuGcAmJGns4JHYtmV\",\n      explorerUrl: \"https://polygonscan.com\",\n      apiUrl: \"https://api.polygonscan.com/api\",\n      apiKey: \"2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0xB1b9fB937A11873380b3B87a1eF8063a66e54822\",\n    },\n  ],\n  [\n    \"Mumbai\",\n    {\n      rpcUrl:\n        \"https://polygon-mumbai.g.alchemy.com/v2/hk9vh9U3GZGWC8Un2i0-ICRoOJkCUQg_\",\n      explorerUrl: \"https://mumbai.polygonscan.com\",\n      apiUrl: \"https://api-testnet.polygonscan.com/api\",\n      apiKey: \"2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0xB0CeC6F20Ea617D0CdeFef6521AaD99d21876Ad5\",\n    },\n  ],\n  [\n    \"Ethereum\",\n    {\n      rpcUrl: \"https://mainnet.infura.io/v3/7c338dd2f00a443c906e6f081cf11b07\",\n      explorerUrl: \"https://etherscan.io\",\n      apiUrl: \"https://api.etherscan.io/api\",\n      apiKey: \"HCDV8YBBWDK369IPAA8QMBE2DIEP94CEB7\",\n      // FIFSResolvingRegistrar (AragonID)\n      aragonIdAddress: \"0x546aA2EaE2514494EeaDb7bbb35243348983C59d\",\n    },\n  ],\n]);\n\n// topic = ClaimSubdomain\nconst topic =\n  \"0xe27a5a369e0d2c5056ccfcbd5f83f145f43350142d42aaf46ff9a9e461d543df\";\nexport function getLogUrl(networkType: string): string {\n  const network = networks.get(networkType);\n\n  return network\n    ? `${network.apiUrl}?` +\n        \"module=logs&action=getLogs&fromBlock=186100\" +\n        `&address=${network.aragonIdAddress}` +\n        `&topic0=${topic}` +\n        `&apikey=${network.apiKey}`\n    : \"\";\n}\n\nexport function getExplorerUrlByTransaction(\n  networkType: string,\n  txHash: string = \"\"\n): string {\n  const network = networks.get(networkType);\n\n  return network ? `${network.explorerUrl}/tx/${txHash}` : \"\";\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Main, Box, Header, Link, DropDown } from \"@aragon/ui\";\nimport { providers, utils } from \"ethers\";\nimport { networks, getLogUrl, getExplorerUrlByTransaction } from \"./networks\";\n\nconst abi = [\n  `function newTokenAndInstance(\n  string _tokenName,\n  string _tokenSymbol,\n  string id,\n  address[] _holders,\n  uint256[] _stakes,\n  uint64[3] _votingSettings,\n  uint64 _financePeriod,\n  bool _useAgentAsVault\n)`,\n  `function newInstance(\n  string id,\n  address[] memory _holders,\n  uint256[] memory _stakes,\n  uint64[3] memory _votingSettings,\n  uint64 _financePeriod,\n  bool _useAgentAsVault\n)`,\n];\n\nconst appendAragonId = (name: string) => name + \".aragonid.eth\";\n\ntype DaoInfo = {\n  name?: string;\n  hash: string;\n  timestamp: Date;\n  blockNumber: number;\n};\n\nconst networkNames = Array.from(networks.keys());\n\nfunction App() {\n  const [result, setResult] = useState<DaoInfo[]>([]);\n  const [selectedNetwork, setNetworkIndex] = useState<number>(0);\n\n  useEffect(() => {\n    async function getData() {\n      const networkType = networkNames[selectedNetwork];\n      const network = networks.get(networkType);\n      if (!network) return;\n\n      const provider = new providers.JsonRpcProvider(network.rpcUrl);\n      const iface = new utils.Interface(abi);\n      const response = await fetch(getLogUrl(networkType), {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const sigNewTokenAndInstance = iface.getSighash(\"newTokenAndInstance\");\n      const sigNewInstance = iface.getSighash(\"newInstance\");\n\n      const jsonResult = await response.json();\n      const names: DaoInfo[] = await Promise.all(\n        jsonResult.result.map(async (res: any) => {\n          const hash = res.transactionHash;\n          const timestamp = new Date(parseInt(res.timeStamp) * 1000);\n          const tx = await provider.getTransaction(hash);\n          if (tx.data) {\n            if (tx.data.startsWith(sigNewTokenAndInstance)) {\n              const decoded = iface.decodeFunctionData(\n                \"newTokenAndInstance\",\n                tx.data\n              );\n              return { hash, name: appendAragonId(decoded.id), timestamp };\n            }\n\n            if (tx.data.startsWith(sigNewInstance)) {\n              const decoded = iface.decodeFunctionData(\"newInstance\", tx.data);\n              return { hash, name: appendAragonId(decoded.id), timestamp };\n            }\n          }\n          return { hash, timestamp, blockNumber: parseInt(res.blockNumber) };\n        })\n      );\n\n      setResult(names.filter(({ name }) => Boolean(name)));\n    }\n\n    getData();\n  }, [selectedNetwork]);\n\n  const handleNetworkChange = useCallback((index: number) => {\n    setNetworkIndex(index);\n    setResult([]);\n  }, []);\n\n  return (\n    <div className=\"scroll-view-container\">\n      <div className=\"scroll-view\">\n        <Main scrollView={true}>\n          <Header\n            primary=\"Aragon DAO\"\n            secondary={\n              <DropDown\n                placeholder=\"ArbitrumTestnet\"\n                items={networkNames}\n                selected={selectedNetwork}\n                onChange={handleNetworkChange}\n              />\n            }\n          />\n          <div>total: {result.length}</div>\n          <Box>\n            <table>\n              <tbody>\n                <tr>\n                  <td>\n                    <b>Date</b>\n                  </td>\n                  <td>\n                    <b>TX hash</b>\n                  </td>\n                  <td>\n                    <b>ENS name</b>\n                  </td>\n                </tr>\n                {result.map((res, i) => {\n                  return (\n                    <tr key={i}>\n                      <td>{res.timestamp?.toDateString()}</td>\n                      <td>\n                        <Link\n                          href={getExplorerUrlByTransaction(\n                            networkNames[selectedNetwork],\n                            res.hash\n                          )}\n                        >\n                          {res.hash}\n                        </Link>\n                      </td>\n                      <td>\n                        <span> {res.name ? res.name : \"\"}</span>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </Box>\n        </Main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}