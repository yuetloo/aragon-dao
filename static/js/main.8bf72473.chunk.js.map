{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["abi","GETLOG_URL","appendAragonId","name","App","useState","result","setResult","useEffect","a","provider","providers","AlchemyProvider","iface","utils","Interface","fetch","method","headers","response","sigNewTokenAndInstance","getSighash","sigNewInstance","json","jsonResult","console","log","length","Promise","all","map","res","hash","transactionHash","getTransaction","tx","data","startsWith","decoded","decodeFunctionData","id","names","getData","className","scrollView","primary","i","shorten","networkType","transaction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAIMA,EAAM,CAAC,6NAAD,6LAwBNC,EAAa,iGADH,8CACG,kBAHL,sEAGK,6CAObC,EAAiB,SAACC,GAAD,OAAiBA,EAAO,iBAmFhCC,MA5Ef,WACE,MAA4BC,mBAAoB,IAAhD,mBAAOC,EAAP,KAAeC,EAAf,KA6CA,OA1CAC,qBAAU,WAAM,4CACd,wCAAAC,EAAA,6DACQC,EAAW,IAAIC,IAAUC,gBAAgB,KACzCC,EAAQ,IAAIC,IAAMC,UAAUf,GAFpC,SAGyBgB,MAAMf,EAAY,CACvCgB,OAAQ,MACRC,QAAS,CACP,eAAgB,sBANtB,cAGQC,EAHR,OASQC,EAAyBP,EAAMQ,WAAW,uBAC1CC,EAAiBT,EAAMQ,WAAW,eAV1C,SAY2BF,EAASI,OAZpC,cAYQC,EAZR,OAaEC,QAAQC,IAAI,UAAWF,EAAWlB,OAAOqB,QAb3C,UAciCC,QAAQC,IAAIL,EAAWlB,OAAOwB,IAAlB,uCAAsB,WAAOC,GAAP,qBAAAtB,EAAA,6DACzDuB,EAAOD,EAAIE,gBAD8C,SAG9CvB,EAASwB,eAAeF,GAHsB,YAGzDG,EAHyD,QAIzDC,KAJyD,qBAMzDD,EAAGC,KAAKC,WAAWjB,GANsC,uBAOrDkB,EAAUzB,EAAM0B,mBAAmB,sBAAuBJ,EAAGC,MAPR,kBAQpD,CAAEJ,OAAM7B,KAAMD,EAAeoC,EAAQE,MARe,WAWzDL,EAAGC,KAAKC,WAAWf,GAXsC,wBAYrDgB,EAAUzB,EAAM0B,mBAAmB,cAAeJ,EAAGC,MAZA,kBAapD,CAAEJ,OAAM7B,KAAMD,EAAeoC,EAAQE,MAbe,iCAgBxD,CAAER,SAhBsD,4CAAtB,wDAd7C,QAcQS,EAdR,OAiCElC,EAAUkC,GAjCZ,4CADc,yBAAC,WAAD,wBAqCdC,KAEC,IAID,qBAAKC,UAAU,wBAAf,SACE,qBAAKA,UAAU,cAAf,SACE,eAAC,OAAD,CAAMC,YAAY,EAAlB,UACE,cAAC,SAAD,CAAQC,QAAQ,yBAChB,0CAAavC,EAAOqB,UACpB,cAAC,MAAD,UACA,kCACE,+BAAI,6BAAI,0CAAmB,6BAAI,8CAG7BrB,EAAOwB,KAAI,SAACC,EAAKe,GACf,OACE,+BACA,6BAAI,cAAC,mBAAD,CAAkBC,SAAS,EAAOC,YAAY,QAAQC,YAAalB,EAAIC,SAC3E,6BAAI,qCAAQD,EAAI5B,KAAM4B,EAAI5B,KAAO,UAFxB2C,mBCvFZI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8bf72473.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Main, Box, Header, TransactionBadge } from '@aragon/ui';\nimport { providers, utils } from 'ethers';\n\nconst abi = [\n`function newTokenAndInstance(\n  string _tokenName,\n  string _tokenSymbol,\n  string id,\n  address[] _holders,\n  uint256[] _stakes,\n  uint64[3] _votingSettings,\n  uint64 _financePeriod,\n  bool _useAgentAsVault\n)`, \n`function newInstance(\n  string id,\n  address[] memory _holders,\n  uint256[] memory _stakes,\n  uint64[3] memory _votingSettings,\n  uint64 _financePeriod,\n  bool _useAgentAsVault\n)`]\n\n// topic = ClaimSubdomain\nconst topic = '0xe27a5a369e0d2c5056ccfcbd5f83f145f43350142d42aaf46ff9a9e461d543df'\n// FIFSResolvingRegistrar (AragonID)\nconst address = '0xB1b9fB937A11873380b3B87a1eF8063a66e54822'\nconst GETLOG_URL = 'https://api.polygonscan.com/api?' +\n            'module=logs&action=getLogs&fromBlock=186100' + \n            `&address=${address}` +\n            `&topic0=${topic}` + \n            `&apikey=2TQMPNQB5UPFE1IVIW53ZBB1WVXQD6A29P`;\n\n\nconst appendAragonId = (name:string) => name + '.aragonid.eth'\n\ntype DaoInfo = {\n  name?: string\n  hash?: string\n}\n\nfunction App() {\n  const [result, setResult] = useState<DaoInfo[]>([])\n  \n  \n  useEffect(() => {\n    async function getData() {\n      const provider = new providers.AlchemyProvider(137)\n      const iface = new utils.Interface(abi)\n      const response = await fetch(GETLOG_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const sigNewTokenAndInstance = iface.getSighash('newTokenAndInstance');\n      const sigNewInstance = iface.getSighash('newInstance');\n\n      const jsonResult = await response.json();\n      console.log('respnse', jsonResult.result.length);\n      const names: DaoInfo[] = await Promise.all(jsonResult.result.map(async (res: any) => {\n        const hash = res.transactionHash;\n\n        const tx = await provider.getTransaction(hash)\n        if(tx.data)\n        {\n          if( tx.data.startsWith(sigNewTokenAndInstance)) {\n            const decoded = iface.decodeFunctionData(\"newTokenAndInstance\", tx.data);\n            return { hash, name: appendAragonId(decoded.id) }\n          }\n          \n          if( tx.data.startsWith(sigNewInstance)) {\n            const decoded = iface.decodeFunctionData(\"newInstance\", tx.data);\n            return { hash, name: appendAragonId(decoded.id) }\n          }\n        }\n        return { hash };\n      }))\n\n      setResult(names);\n    }\n\n    getData()\n  \n  }, [])\n  \n\n  return (\n    <div className=\"scroll-view-container\">\n      <div className=\"scroll-view\">\n        <Main scrollView={true}>\n          <Header primary=\"Aragon DAO (Polygon)\" />\n          <div>total: {result.length}</div>\n          <Box>\n          <table>\n            <tr><td><b>TX hash</b></td><td><b>ENS name</b></td></tr>\n            {\n              \n              result.map((res, i) => {\n                return (\n                  <tr key={i}>\n                  <td><TransactionBadge shorten={false} networkType='matic' transaction={res.hash} /></td>\n                  <td><span> {res.name? res.name : ''}</span></td>\n                  </tr>\n                )\n              })  \n            }\n            </table>\n          </Box>\n        </Main>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}